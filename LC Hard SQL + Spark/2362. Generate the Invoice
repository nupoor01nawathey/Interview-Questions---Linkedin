/*
2362. Generate the Invoice

Table: Products
+-------------+------+
| Column Name | Type |
+-------------+------+
| product_id  | int  |
| price       | int  |
+-------------+------+
product_id is the primary key for this table.
Each row in this table shows the ID of a product and the price of one unit.

Table: Purchases
+-------------+------+
| Column Name | Type |
+-------------+------+
| invoice_id  | int  |
| product_id  | int  |
| quantity    | int  |
+-------------+------+
(invoice_id, product_id) is the primary key for this table.
Each row in this table shows the quantity ordered from one product in an invoice. 

Write an SQL query to show the details of the invoice with the highest price. 
If two or more invoices have the same price, return the details of the one with the smallest invoice_id.
Return the result table in any order.
The query result format is shown in the following example.

Example 1:

Input: 
Products table:
+------------+-------+
| product_id | price |
+------------+-------+
| 1          | 100   |
| 2          | 200   |
+------------+-------+
Purchases table:
+------------+------------+----------+
| invoice_id | product_id | quantity |
+------------+------------+----------+
| 1          | 1          | 2        |
| 3          | 2          | 1        |
| 2          | 2          | 3        |
| 2          | 1          | 4        |
| 4          | 1          | 10       |
+------------+------------+----------+
Output: 
+------------+----------+-------+
| product_id | quantity | price |
+------------+----------+-------+
| 2          | 3        | 600   |
| 1          | 4        | 400   |
+------------+----------+-------+
Explanation: 
Invoice 1: price = (2 * 100) = $200
Invoice 2: price = (4 * 100) + (3 * 200) = $1000
Invoice 3: price = (1 * 200) = $200
Invoice 4: price = (10 * 100) = $1000

The highest price is $1000, and the invoices with the highest prices are 2 and 4. 
We return the details of the one with the smallest ID, which is invoice 2.
*/

Create table Products (product_id int, price int);
Create table Purchases (invoice_id int, product_id int, quantity int);

insert into Products values ('1', '100'),
('2', '200');

insert into Purchases values 
('1', '1', '2'),
('3', '2', '1'),
('2', '2', '3'),
('2', '1', '4'),
('4', '1', '10');

with cte as (
select
  pu.invoice_id,
  sum(pu.quantity * pr.price) total_price_per_invoice
from Purchases pu left join Products pr
on pu.product_id=pr.product_id
group by pu.invoice_id 
order by total_price_per_invoice desc, pu.invoice_id asc 
limit 1
)
select
  pu.product_id,
  pu.quantity,
  pu.quantity * pr.price as price
from Purchases pu left join Products pr
on pu.product_id=pr.product_id
right join cte -- join equivalent sub-query would be where pu.invoice_id in (select invoice_id from cte)
on pu.invoice_id=cte.invoice_id 
;


import org.apache.spark.sql.Row
import org.apache.spark.sql.types._
import org.apache.spark.sql.functions._
import org.apache.spark.sql.expressions.Window

val dataProducts = Seq(
  Row(1, 100),
  Row(2, 200)
)

val dataPurchases = Seq(
  Row(1,1,2),
  Row(3,2,1),
  Row(2,2,3),
  Row(2,1,4),
  Row(4,1,10)
)

val schemaProducts = StructType(List(
  StructField("product_id", IntegerType),
  StructField("price", IntegerType)
))

val schemaPurchases = StructType(List(
  StructField("invoice_id", IntegerType),
  StructField("product_id", IntegerType),
  StructField("quantity", IntegerType)
))

val rddProducts = spark.sparkContext.parallelize(dataProducts)
val dfProducts = spark.createDataFrame(rddProducts, schemaProducts)

val rddPurchases = spark.sparkContext.parallelize(dataPurchases)
val dfPurchases = spark.createDataFrame(rddPurchases, schemaPurchases)

val dfTopInvoicePrice = dfPurchases.alias("pu").join(dfProducts.alias("pr"), $"pu.product_id" === $"pr.product_id", "left"
).groupBy($"pu.invoice_id").agg(sum($"pu.quantity" * $"pr.price").alias("total_price_per_invoice")
).orderBy($"total_price_per_invoice".desc, $"invoice_id"
).limit(1)

dfPurchases.alias("pu").join(dfProducts.alias("pr"), $"pu.product_id" === $"pr.product_id", "left"
).withColumn("price", $"pu.quantity" * $"pr.price"
).join(dfTopInvoicePrice.alias("t"), $"pu.invoice_id" === $"t.invoice_id", "right"
).select("pu.product_id", "pu.quantity", "price").show(false)

